---
    import { State } from "../../ts/types";
    import About from "../client/about.svelte";
    import Docs from "../client/docs.astro";
    import Blog from "../client/blog.svelte";
    import Contact from "../client/contact.svelte";
    import Error from "../error.svelte";
    import Navbar from "../client/navbar.svelte";
    import Loading from "./loading.svelte";
    import type { Error as RequestError } from "../../ts/types"
    import { getStateFromQuery, getClient } from "../../ts/utils";

    let search = Astro.url.search
    let state = getStateFromQuery(search);
    let loading = true;
    export let pos_err: RequestError = {
        type: "500",
        message: "Oops, the hamsters took a break.  Let's wait until they come back."
    };


    //Ping
    const controller = new AbortController()
    setTimeout(() => controller.abort(), 5000)
    const mode = import.meta.env.MODE
    // Testing deployment mode
    // const addr = 'http://localhost:5069/v1/ping'
    const addr = mode === 'development' ? 'http://0.0.0.0:5069/v1/ping' : 'https://api.qinbeans.net/v1/ping'
    await fetch(addr, {
        method: 'GET',
        headers: {},
        mode: 'cors',
        signal: controller.signal
    }).catch(() => {
        console.log("Failed to fetch ping")
        state = State.ERROR
        loading = false
    }).then(() => {
        loading = false
    })
---

{loading &&(
    <Loading/>
)}
{!loading && state != State.ERROR &&(
    <Navbar search={search} client:load/>
)}
<main class="w-screen h-screen">
{!loading && state == State.ABOUT &&(
    <About client:load/>
)}
{!loading && state == State.DOCS &&(
    <Docs/>
)}
{!loading && state == State.BLOG &&(
    <Blog client:load/>
)}
{!loading && state == State.CONTACT &&(
    <Contact client:load/>
)}
{!loading && state == State.ERROR &&(
    <Error type={(pos_err.type != null)?pos_err.type:`500`} message={pos_err.message}/>
)}
</main>